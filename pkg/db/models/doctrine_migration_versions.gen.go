// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/turbovladimir/csv-parser/pkg/db/model"
)

func newDoctrineMigrationVersion(db *gorm.DB, opts ...gen.DOOption) doctrineMigrationVersion {
	_doctrineMigrationVersion := doctrineMigrationVersion{}

	_doctrineMigrationVersion.doctrineMigrationVersionDo.UseDB(db, opts...)
	_doctrineMigrationVersion.doctrineMigrationVersionDo.UseModel(&model.DoctrineMigrationVersion{})

	tableName := _doctrineMigrationVersion.doctrineMigrationVersionDo.TableName()
	_doctrineMigrationVersion.ALL = field.NewAsterisk(tableName)
	_doctrineMigrationVersion.Version = field.NewString(tableName, "version")
	_doctrineMigrationVersion.ExecutedAt = field.NewTime(tableName, "executed_at")
	_doctrineMigrationVersion.ExecutionTime = field.NewInt32(tableName, "execution_time")

	_doctrineMigrationVersion.fillFieldMap()

	return _doctrineMigrationVersion
}

type doctrineMigrationVersion struct {
	doctrineMigrationVersionDo

	ALL           field.Asterisk
	Version       field.String
	ExecutedAt    field.Time
	ExecutionTime field.Int32

	fieldMap map[string]field.Expr
}

func (d doctrineMigrationVersion) Table(newTableName string) *doctrineMigrationVersion {
	d.doctrineMigrationVersionDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d doctrineMigrationVersion) As(alias string) *doctrineMigrationVersion {
	d.doctrineMigrationVersionDo.DO = *(d.doctrineMigrationVersionDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *doctrineMigrationVersion) updateTableName(table string) *doctrineMigrationVersion {
	d.ALL = field.NewAsterisk(table)
	d.Version = field.NewString(table, "version")
	d.ExecutedAt = field.NewTime(table, "executed_at")
	d.ExecutionTime = field.NewInt32(table, "execution_time")

	d.fillFieldMap()

	return d
}

func (d *doctrineMigrationVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *doctrineMigrationVersion) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["version"] = d.Version
	d.fieldMap["executed_at"] = d.ExecutedAt
	d.fieldMap["execution_time"] = d.ExecutionTime
}

func (d doctrineMigrationVersion) clone(db *gorm.DB) doctrineMigrationVersion {
	d.doctrineMigrationVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d doctrineMigrationVersion) replaceDB(db *gorm.DB) doctrineMigrationVersion {
	d.doctrineMigrationVersionDo.ReplaceDB(db)
	return d
}

type doctrineMigrationVersionDo struct{ gen.DO }

type IDoctrineMigrationVersionDo interface {
	gen.SubQuery
	Debug() IDoctrineMigrationVersionDo
	WithContext(ctx context.Context) IDoctrineMigrationVersionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDoctrineMigrationVersionDo
	WriteDB() IDoctrineMigrationVersionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDoctrineMigrationVersionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDoctrineMigrationVersionDo
	Not(conds ...gen.Condition) IDoctrineMigrationVersionDo
	Or(conds ...gen.Condition) IDoctrineMigrationVersionDo
	Select(conds ...field.Expr) IDoctrineMigrationVersionDo
	Where(conds ...gen.Condition) IDoctrineMigrationVersionDo
	Order(conds ...field.Expr) IDoctrineMigrationVersionDo
	Distinct(cols ...field.Expr) IDoctrineMigrationVersionDo
	Omit(cols ...field.Expr) IDoctrineMigrationVersionDo
	Join(table schema.Tabler, on ...field.Expr) IDoctrineMigrationVersionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDoctrineMigrationVersionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDoctrineMigrationVersionDo
	Group(cols ...field.Expr) IDoctrineMigrationVersionDo
	Having(conds ...gen.Condition) IDoctrineMigrationVersionDo
	Limit(limit int) IDoctrineMigrationVersionDo
	Offset(offset int) IDoctrineMigrationVersionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDoctrineMigrationVersionDo
	Unscoped() IDoctrineMigrationVersionDo
	Create(values ...*model.DoctrineMigrationVersion) error
	CreateInBatches(values []*model.DoctrineMigrationVersion, batchSize int) error
	Save(values ...*model.DoctrineMigrationVersion) error
	First() (*model.DoctrineMigrationVersion, error)
	Take() (*model.DoctrineMigrationVersion, error)
	Last() (*model.DoctrineMigrationVersion, error)
	Find() ([]*model.DoctrineMigrationVersion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DoctrineMigrationVersion, err error)
	FindInBatches(result *[]*model.DoctrineMigrationVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DoctrineMigrationVersion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDoctrineMigrationVersionDo
	Assign(attrs ...field.AssignExpr) IDoctrineMigrationVersionDo
	Joins(fields ...field.RelationField) IDoctrineMigrationVersionDo
	Preload(fields ...field.RelationField) IDoctrineMigrationVersionDo
	FirstOrInit() (*model.DoctrineMigrationVersion, error)
	FirstOrCreate() (*model.DoctrineMigrationVersion, error)
	FindByPage(offset int, limit int) (result []*model.DoctrineMigrationVersion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDoctrineMigrationVersionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d doctrineMigrationVersionDo) Debug() IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Debug())
}

func (d doctrineMigrationVersionDo) WithContext(ctx context.Context) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d doctrineMigrationVersionDo) ReadDB() IDoctrineMigrationVersionDo {
	return d.Clauses(dbresolver.Read)
}

func (d doctrineMigrationVersionDo) WriteDB() IDoctrineMigrationVersionDo {
	return d.Clauses(dbresolver.Write)
}

func (d doctrineMigrationVersionDo) Session(config *gorm.Session) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Session(config))
}

func (d doctrineMigrationVersionDo) Clauses(conds ...clause.Expression) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d doctrineMigrationVersionDo) Returning(value interface{}, columns ...string) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d doctrineMigrationVersionDo) Not(conds ...gen.Condition) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d doctrineMigrationVersionDo) Or(conds ...gen.Condition) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d doctrineMigrationVersionDo) Select(conds ...field.Expr) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d doctrineMigrationVersionDo) Where(conds ...gen.Condition) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d doctrineMigrationVersionDo) Order(conds ...field.Expr) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d doctrineMigrationVersionDo) Distinct(cols ...field.Expr) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d doctrineMigrationVersionDo) Omit(cols ...field.Expr) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d doctrineMigrationVersionDo) Join(table schema.Tabler, on ...field.Expr) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d doctrineMigrationVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d doctrineMigrationVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d doctrineMigrationVersionDo) Group(cols ...field.Expr) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d doctrineMigrationVersionDo) Having(conds ...gen.Condition) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d doctrineMigrationVersionDo) Limit(limit int) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d doctrineMigrationVersionDo) Offset(offset int) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d doctrineMigrationVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d doctrineMigrationVersionDo) Unscoped() IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Unscoped())
}

func (d doctrineMigrationVersionDo) Create(values ...*model.DoctrineMigrationVersion) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d doctrineMigrationVersionDo) CreateInBatches(values []*model.DoctrineMigrationVersion, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d doctrineMigrationVersionDo) Save(values ...*model.DoctrineMigrationVersion) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d doctrineMigrationVersionDo) First() (*model.DoctrineMigrationVersion, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DoctrineMigrationVersion), nil
	}
}

func (d doctrineMigrationVersionDo) Take() (*model.DoctrineMigrationVersion, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DoctrineMigrationVersion), nil
	}
}

func (d doctrineMigrationVersionDo) Last() (*model.DoctrineMigrationVersion, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DoctrineMigrationVersion), nil
	}
}

func (d doctrineMigrationVersionDo) Find() ([]*model.DoctrineMigrationVersion, error) {
	result, err := d.DO.Find()
	return result.([]*model.DoctrineMigrationVersion), err
}

func (d doctrineMigrationVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DoctrineMigrationVersion, err error) {
	buf := make([]*model.DoctrineMigrationVersion, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d doctrineMigrationVersionDo) FindInBatches(result *[]*model.DoctrineMigrationVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d doctrineMigrationVersionDo) Attrs(attrs ...field.AssignExpr) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d doctrineMigrationVersionDo) Assign(attrs ...field.AssignExpr) IDoctrineMigrationVersionDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d doctrineMigrationVersionDo) Joins(fields ...field.RelationField) IDoctrineMigrationVersionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d doctrineMigrationVersionDo) Preload(fields ...field.RelationField) IDoctrineMigrationVersionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d doctrineMigrationVersionDo) FirstOrInit() (*model.DoctrineMigrationVersion, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DoctrineMigrationVersion), nil
	}
}

func (d doctrineMigrationVersionDo) FirstOrCreate() (*model.DoctrineMigrationVersion, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DoctrineMigrationVersion), nil
	}
}

func (d doctrineMigrationVersionDo) FindByPage(offset int, limit int) (result []*model.DoctrineMigrationVersion, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d doctrineMigrationVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d doctrineMigrationVersionDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d doctrineMigrationVersionDo) Delete(models ...*model.DoctrineMigrationVersion) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *doctrineMigrationVersionDo) withDO(do gen.Dao) *doctrineMigrationVersionDo {
	d.DO = *do.(*gen.DO)
	return d
}
