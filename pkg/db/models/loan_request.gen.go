// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/turbovladimir/csv-parser/pkg/db/model"
)

func newLoanRequest(db *gorm.DB, opts ...gen.DOOption) loanRequest {
	_loanRequest := loanRequest{}

	_loanRequest.loanRequestDo.UseDB(db, opts...)
	_loanRequest.loanRequestDo.UseModel(&model.LoanRequest{})

	tableName := _loanRequest.loanRequestDo.TableName()
	_loanRequest.ALL = field.NewAsterisk(tableName)
	_loanRequest.ID = field.NewInt32(tableName, "id")
	_loanRequest.Name = field.NewString(tableName, "name")
	_loanRequest.Surname = field.NewString(tableName, "surname")
	_loanRequest.Patron = field.NewString(tableName, "patron")
	_loanRequest.Phone = field.NewString(tableName, "phone")
	_loanRequest.Birth = field.NewTime(tableName, "birth")
	_loanRequest.Email = field.NewString(tableName, "email")
	_loanRequest.DepartmentCode = field.NewInt32(tableName, "department_code")
	_loanRequest.IssueDate = field.NewTime(tableName, "issue_date")
	_loanRequest.AddedAt = field.NewTime(tableName, "added_at")
	_loanRequest.PassportSeries = field.NewInt32(tableName, "passport_series")
	_loanRequest.PassportNumber = field.NewInt32(tableName, "passport_number")
	_loanRequest.Department = field.NewString(tableName, "department")
	_loanRequest.BirthPlace = field.NewString(tableName, "birth_place")
	_loanRequest.RegPlace = field.NewString(tableName, "reg_place")

	_loanRequest.fillFieldMap()

	return _loanRequest
}

type loanRequest struct {
	loanRequestDo

	ALL            field.Asterisk
	ID             field.Int32
	Name           field.String
	Surname        field.String
	Patron         field.String
	Phone          field.String
	Birth          field.Time
	Email          field.String
	DepartmentCode field.Int32
	IssueDate      field.Time
	AddedAt        field.Time
	PassportSeries field.Int32
	PassportNumber field.Int32
	Department     field.String
	BirthPlace     field.String
	RegPlace       field.String

	fieldMap map[string]field.Expr
}

func (l loanRequest) Table(newTableName string) *loanRequest {
	l.loanRequestDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l loanRequest) As(alias string) *loanRequest {
	l.loanRequestDo.DO = *(l.loanRequestDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *loanRequest) updateTableName(table string) *loanRequest {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Name = field.NewString(table, "name")
	l.Surname = field.NewString(table, "surname")
	l.Patron = field.NewString(table, "patron")
	l.Phone = field.NewString(table, "phone")
	l.Birth = field.NewTime(table, "birth")
	l.Email = field.NewString(table, "email")
	l.DepartmentCode = field.NewInt32(table, "department_code")
	l.IssueDate = field.NewTime(table, "issue_date")
	l.AddedAt = field.NewTime(table, "added_at")
	l.PassportSeries = field.NewInt32(table, "passport_series")
	l.PassportNumber = field.NewInt32(table, "passport_number")
	l.Department = field.NewString(table, "department")
	l.BirthPlace = field.NewString(table, "birth_place")
	l.RegPlace = field.NewString(table, "reg_place")

	l.fillFieldMap()

	return l
}

func (l *loanRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *loanRequest) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 15)
	l.fieldMap["id"] = l.ID
	l.fieldMap["name"] = l.Name
	l.fieldMap["surname"] = l.Surname
	l.fieldMap["patron"] = l.Patron
	l.fieldMap["phone"] = l.Phone
	l.fieldMap["birth"] = l.Birth
	l.fieldMap["email"] = l.Email
	l.fieldMap["department_code"] = l.DepartmentCode
	l.fieldMap["issue_date"] = l.IssueDate
	l.fieldMap["added_at"] = l.AddedAt
	l.fieldMap["passport_series"] = l.PassportSeries
	l.fieldMap["passport_number"] = l.PassportNumber
	l.fieldMap["department"] = l.Department
	l.fieldMap["birth_place"] = l.BirthPlace
	l.fieldMap["reg_place"] = l.RegPlace
}

func (l loanRequest) clone(db *gorm.DB) loanRequest {
	l.loanRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l loanRequest) replaceDB(db *gorm.DB) loanRequest {
	l.loanRequestDo.ReplaceDB(db)
	return l
}

type loanRequestDo struct{ gen.DO }

type ILoanRequestDo interface {
	gen.SubQuery
	Debug() ILoanRequestDo
	WithContext(ctx context.Context) ILoanRequestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILoanRequestDo
	WriteDB() ILoanRequestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILoanRequestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILoanRequestDo
	Not(conds ...gen.Condition) ILoanRequestDo
	Or(conds ...gen.Condition) ILoanRequestDo
	Select(conds ...field.Expr) ILoanRequestDo
	Where(conds ...gen.Condition) ILoanRequestDo
	Order(conds ...field.Expr) ILoanRequestDo
	Distinct(cols ...field.Expr) ILoanRequestDo
	Omit(cols ...field.Expr) ILoanRequestDo
	Join(table schema.Tabler, on ...field.Expr) ILoanRequestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILoanRequestDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILoanRequestDo
	Group(cols ...field.Expr) ILoanRequestDo
	Having(conds ...gen.Condition) ILoanRequestDo
	Limit(limit int) ILoanRequestDo
	Offset(offset int) ILoanRequestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILoanRequestDo
	Unscoped() ILoanRequestDo
	Create(values ...*model.LoanRequest) error
	CreateInBatches(values []*model.LoanRequest, batchSize int) error
	Save(values ...*model.LoanRequest) error
	First() (*model.LoanRequest, error)
	Take() (*model.LoanRequest, error)
	Last() (*model.LoanRequest, error)
	Find() ([]*model.LoanRequest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoanRequest, err error)
	FindInBatches(result *[]*model.LoanRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LoanRequest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILoanRequestDo
	Assign(attrs ...field.AssignExpr) ILoanRequestDo
	Joins(fields ...field.RelationField) ILoanRequestDo
	Preload(fields ...field.RelationField) ILoanRequestDo
	FirstOrInit() (*model.LoanRequest, error)
	FirstOrCreate() (*model.LoanRequest, error)
	FindByPage(offset int, limit int) (result []*model.LoanRequest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILoanRequestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l loanRequestDo) Debug() ILoanRequestDo {
	return l.withDO(l.DO.Debug())
}

func (l loanRequestDo) WithContext(ctx context.Context) ILoanRequestDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l loanRequestDo) ReadDB() ILoanRequestDo {
	return l.Clauses(dbresolver.Read)
}

func (l loanRequestDo) WriteDB() ILoanRequestDo {
	return l.Clauses(dbresolver.Write)
}

func (l loanRequestDo) Session(config *gorm.Session) ILoanRequestDo {
	return l.withDO(l.DO.Session(config))
}

func (l loanRequestDo) Clauses(conds ...clause.Expression) ILoanRequestDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l loanRequestDo) Returning(value interface{}, columns ...string) ILoanRequestDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l loanRequestDo) Not(conds ...gen.Condition) ILoanRequestDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l loanRequestDo) Or(conds ...gen.Condition) ILoanRequestDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l loanRequestDo) Select(conds ...field.Expr) ILoanRequestDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l loanRequestDo) Where(conds ...gen.Condition) ILoanRequestDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l loanRequestDo) Order(conds ...field.Expr) ILoanRequestDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l loanRequestDo) Distinct(cols ...field.Expr) ILoanRequestDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l loanRequestDo) Omit(cols ...field.Expr) ILoanRequestDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l loanRequestDo) Join(table schema.Tabler, on ...field.Expr) ILoanRequestDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l loanRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILoanRequestDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l loanRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) ILoanRequestDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l loanRequestDo) Group(cols ...field.Expr) ILoanRequestDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l loanRequestDo) Having(conds ...gen.Condition) ILoanRequestDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l loanRequestDo) Limit(limit int) ILoanRequestDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l loanRequestDo) Offset(offset int) ILoanRequestDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l loanRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILoanRequestDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l loanRequestDo) Unscoped() ILoanRequestDo {
	return l.withDO(l.DO.Unscoped())
}

func (l loanRequestDo) Create(values ...*model.LoanRequest) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l loanRequestDo) CreateInBatches(values []*model.LoanRequest, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l loanRequestDo) Save(values ...*model.LoanRequest) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l loanRequestDo) First() (*model.LoanRequest, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoanRequest), nil
	}
}

func (l loanRequestDo) Take() (*model.LoanRequest, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoanRequest), nil
	}
}

func (l loanRequestDo) Last() (*model.LoanRequest, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoanRequest), nil
	}
}

func (l loanRequestDo) Find() ([]*model.LoanRequest, error) {
	result, err := l.DO.Find()
	return result.([]*model.LoanRequest), err
}

func (l loanRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoanRequest, err error) {
	buf := make([]*model.LoanRequest, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l loanRequestDo) FindInBatches(result *[]*model.LoanRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l loanRequestDo) Attrs(attrs ...field.AssignExpr) ILoanRequestDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l loanRequestDo) Assign(attrs ...field.AssignExpr) ILoanRequestDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l loanRequestDo) Joins(fields ...field.RelationField) ILoanRequestDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l loanRequestDo) Preload(fields ...field.RelationField) ILoanRequestDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l loanRequestDo) FirstOrInit() (*model.LoanRequest, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoanRequest), nil
	}
}

func (l loanRequestDo) FirstOrCreate() (*model.LoanRequest, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoanRequest), nil
	}
}

func (l loanRequestDo) FindByPage(offset int, limit int) (result []*model.LoanRequest, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l loanRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l loanRequestDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l loanRequestDo) Delete(models ...*model.LoanRequest) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *loanRequestDo) withDO(do gen.Dao) *loanRequestDo {
	l.DO = *do.(*gen.DO)
	return l
}
