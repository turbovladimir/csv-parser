// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/turbovladimir/csv-parser/pkg/db/model"
)

func newOfferCheckerRelation(db *gorm.DB, opts ...gen.DOOption) offerCheckerRelation {
	_offerCheckerRelation := offerCheckerRelation{}

	_offerCheckerRelation.offerCheckerRelationDo.UseDB(db, opts...)
	_offerCheckerRelation.offerCheckerRelationDo.UseModel(&model.OfferCheckerRelation{})

	tableName := _offerCheckerRelation.offerCheckerRelationDo.TableName()
	_offerCheckerRelation.ALL = field.NewAsterisk(tableName)
	_offerCheckerRelation.ID = field.NewInt32(tableName, "id")
	_offerCheckerRelation.OfferID = field.NewInt32(tableName, "offer_id")
	_offerCheckerRelation.ExternalOfferID = field.NewInt32(tableName, "external_offer_id")
	_offerCheckerRelation.Checker = field.NewString(tableName, "checker")
	_offerCheckerRelation.AddedAt = field.NewTime(tableName, "added_at")

	_offerCheckerRelation.fillFieldMap()

	return _offerCheckerRelation
}

type offerCheckerRelation struct {
	offerCheckerRelationDo

	ALL             field.Asterisk
	ID              field.Int32
	OfferID         field.Int32
	ExternalOfferID field.Int32
	Checker         field.String
	AddedAt         field.Time

	fieldMap map[string]field.Expr
}

func (o offerCheckerRelation) Table(newTableName string) *offerCheckerRelation {
	o.offerCheckerRelationDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o offerCheckerRelation) As(alias string) *offerCheckerRelation {
	o.offerCheckerRelationDo.DO = *(o.offerCheckerRelationDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *offerCheckerRelation) updateTableName(table string) *offerCheckerRelation {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt32(table, "id")
	o.OfferID = field.NewInt32(table, "offer_id")
	o.ExternalOfferID = field.NewInt32(table, "external_offer_id")
	o.Checker = field.NewString(table, "checker")
	o.AddedAt = field.NewTime(table, "added_at")

	o.fillFieldMap()

	return o
}

func (o *offerCheckerRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *offerCheckerRelation) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["id"] = o.ID
	o.fieldMap["offer_id"] = o.OfferID
	o.fieldMap["external_offer_id"] = o.ExternalOfferID
	o.fieldMap["checker"] = o.Checker
	o.fieldMap["added_at"] = o.AddedAt
}

func (o offerCheckerRelation) clone(db *gorm.DB) offerCheckerRelation {
	o.offerCheckerRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o offerCheckerRelation) replaceDB(db *gorm.DB) offerCheckerRelation {
	o.offerCheckerRelationDo.ReplaceDB(db)
	return o
}

type offerCheckerRelationDo struct{ gen.DO }

type IOfferCheckerRelationDo interface {
	gen.SubQuery
	Debug() IOfferCheckerRelationDo
	WithContext(ctx context.Context) IOfferCheckerRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOfferCheckerRelationDo
	WriteDB() IOfferCheckerRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOfferCheckerRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOfferCheckerRelationDo
	Not(conds ...gen.Condition) IOfferCheckerRelationDo
	Or(conds ...gen.Condition) IOfferCheckerRelationDo
	Select(conds ...field.Expr) IOfferCheckerRelationDo
	Where(conds ...gen.Condition) IOfferCheckerRelationDo
	Order(conds ...field.Expr) IOfferCheckerRelationDo
	Distinct(cols ...field.Expr) IOfferCheckerRelationDo
	Omit(cols ...field.Expr) IOfferCheckerRelationDo
	Join(table schema.Tabler, on ...field.Expr) IOfferCheckerRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOfferCheckerRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOfferCheckerRelationDo
	Group(cols ...field.Expr) IOfferCheckerRelationDo
	Having(conds ...gen.Condition) IOfferCheckerRelationDo
	Limit(limit int) IOfferCheckerRelationDo
	Offset(offset int) IOfferCheckerRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOfferCheckerRelationDo
	Unscoped() IOfferCheckerRelationDo
	Create(values ...*model.OfferCheckerRelation) error
	CreateInBatches(values []*model.OfferCheckerRelation, batchSize int) error
	Save(values ...*model.OfferCheckerRelation) error
	First() (*model.OfferCheckerRelation, error)
	Take() (*model.OfferCheckerRelation, error)
	Last() (*model.OfferCheckerRelation, error)
	Find() ([]*model.OfferCheckerRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OfferCheckerRelation, err error)
	FindInBatches(result *[]*model.OfferCheckerRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OfferCheckerRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOfferCheckerRelationDo
	Assign(attrs ...field.AssignExpr) IOfferCheckerRelationDo
	Joins(fields ...field.RelationField) IOfferCheckerRelationDo
	Preload(fields ...field.RelationField) IOfferCheckerRelationDo
	FirstOrInit() (*model.OfferCheckerRelation, error)
	FirstOrCreate() (*model.OfferCheckerRelation, error)
	FindByPage(offset int, limit int) (result []*model.OfferCheckerRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOfferCheckerRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o offerCheckerRelationDo) Debug() IOfferCheckerRelationDo {
	return o.withDO(o.DO.Debug())
}

func (o offerCheckerRelationDo) WithContext(ctx context.Context) IOfferCheckerRelationDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o offerCheckerRelationDo) ReadDB() IOfferCheckerRelationDo {
	return o.Clauses(dbresolver.Read)
}

func (o offerCheckerRelationDo) WriteDB() IOfferCheckerRelationDo {
	return o.Clauses(dbresolver.Write)
}

func (o offerCheckerRelationDo) Session(config *gorm.Session) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Session(config))
}

func (o offerCheckerRelationDo) Clauses(conds ...clause.Expression) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o offerCheckerRelationDo) Returning(value interface{}, columns ...string) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o offerCheckerRelationDo) Not(conds ...gen.Condition) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o offerCheckerRelationDo) Or(conds ...gen.Condition) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o offerCheckerRelationDo) Select(conds ...field.Expr) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o offerCheckerRelationDo) Where(conds ...gen.Condition) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o offerCheckerRelationDo) Order(conds ...field.Expr) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o offerCheckerRelationDo) Distinct(cols ...field.Expr) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o offerCheckerRelationDo) Omit(cols ...field.Expr) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o offerCheckerRelationDo) Join(table schema.Tabler, on ...field.Expr) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o offerCheckerRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOfferCheckerRelationDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o offerCheckerRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IOfferCheckerRelationDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o offerCheckerRelationDo) Group(cols ...field.Expr) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o offerCheckerRelationDo) Having(conds ...gen.Condition) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o offerCheckerRelationDo) Limit(limit int) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o offerCheckerRelationDo) Offset(offset int) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o offerCheckerRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o offerCheckerRelationDo) Unscoped() IOfferCheckerRelationDo {
	return o.withDO(o.DO.Unscoped())
}

func (o offerCheckerRelationDo) Create(values ...*model.OfferCheckerRelation) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o offerCheckerRelationDo) CreateInBatches(values []*model.OfferCheckerRelation, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o offerCheckerRelationDo) Save(values ...*model.OfferCheckerRelation) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o offerCheckerRelationDo) First() (*model.OfferCheckerRelation, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OfferCheckerRelation), nil
	}
}

func (o offerCheckerRelationDo) Take() (*model.OfferCheckerRelation, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OfferCheckerRelation), nil
	}
}

func (o offerCheckerRelationDo) Last() (*model.OfferCheckerRelation, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OfferCheckerRelation), nil
	}
}

func (o offerCheckerRelationDo) Find() ([]*model.OfferCheckerRelation, error) {
	result, err := o.DO.Find()
	return result.([]*model.OfferCheckerRelation), err
}

func (o offerCheckerRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OfferCheckerRelation, err error) {
	buf := make([]*model.OfferCheckerRelation, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o offerCheckerRelationDo) FindInBatches(result *[]*model.OfferCheckerRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o offerCheckerRelationDo) Attrs(attrs ...field.AssignExpr) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o offerCheckerRelationDo) Assign(attrs ...field.AssignExpr) IOfferCheckerRelationDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o offerCheckerRelationDo) Joins(fields ...field.RelationField) IOfferCheckerRelationDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o offerCheckerRelationDo) Preload(fields ...field.RelationField) IOfferCheckerRelationDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o offerCheckerRelationDo) FirstOrInit() (*model.OfferCheckerRelation, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OfferCheckerRelation), nil
	}
}

func (o offerCheckerRelationDo) FirstOrCreate() (*model.OfferCheckerRelation, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OfferCheckerRelation), nil
	}
}

func (o offerCheckerRelationDo) FindByPage(offset int, limit int) (result []*model.OfferCheckerRelation, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o offerCheckerRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o offerCheckerRelationDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o offerCheckerRelationDo) Delete(models ...*model.OfferCheckerRelation) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *offerCheckerRelationDo) withDO(do gen.Dao) *offerCheckerRelationDo {
	o.DO = *do.(*gen.DO)
	return o
}
