// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/turbovladimir/csv-parser/pkg/db/model"
)

func newSm(db *gorm.DB, opts ...gen.DOOption) sm {
	_sm := sm{}

	_sm.smDo.UseDB(db, opts...)
	_sm.smDo.UseModel(&model.Sm{})

	tableName := _sm.smDo.TableName()
	_sm.ALL = field.NewAsterisk(tableName)
	_sm.ID = field.NewInt32(tableName, "id")
	_sm.JobID = field.NewInt32(tableName, "job_id")
	_sm.SmsQueueID = field.NewInt32(tableName, "sms_queue_id")
	_sm.AddedAt = field.NewTime(tableName, "added_at")
	_sm.Message = field.NewString(tableName, "message")

	_sm.fillFieldMap()

	return _sm
}

type sm struct {
	smDo

	ALL        field.Asterisk
	ID         field.Int32
	JobID      field.Int32
	SmsQueueID field.Int32
	AddedAt    field.Time
	Message    field.String

	fieldMap map[string]field.Expr
}

func (s sm) Table(newTableName string) *sm {
	s.smDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sm) As(alias string) *sm {
	s.smDo.DO = *(s.smDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sm) updateTableName(table string) *sm {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.JobID = field.NewInt32(table, "job_id")
	s.SmsQueueID = field.NewInt32(table, "sms_queue_id")
	s.AddedAt = field.NewTime(table, "added_at")
	s.Message = field.NewString(table, "message")

	s.fillFieldMap()

	return s
}

func (s *sm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sm) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["job_id"] = s.JobID
	s.fieldMap["sms_queue_id"] = s.SmsQueueID
	s.fieldMap["added_at"] = s.AddedAt
	s.fieldMap["message"] = s.Message
}

func (s sm) clone(db *gorm.DB) sm {
	s.smDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sm) replaceDB(db *gorm.DB) sm {
	s.smDo.ReplaceDB(db)
	return s
}

type smDo struct{ gen.DO }

type ISmDo interface {
	gen.SubQuery
	Debug() ISmDo
	WithContext(ctx context.Context) ISmDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmDo
	WriteDB() ISmDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmDo
	Not(conds ...gen.Condition) ISmDo
	Or(conds ...gen.Condition) ISmDo
	Select(conds ...field.Expr) ISmDo
	Where(conds ...gen.Condition) ISmDo
	Order(conds ...field.Expr) ISmDo
	Distinct(cols ...field.Expr) ISmDo
	Omit(cols ...field.Expr) ISmDo
	Join(table schema.Tabler, on ...field.Expr) ISmDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmDo
	Group(cols ...field.Expr) ISmDo
	Having(conds ...gen.Condition) ISmDo
	Limit(limit int) ISmDo
	Offset(offset int) ISmDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmDo
	Unscoped() ISmDo
	Create(values ...*model.Sm) error
	CreateInBatches(values []*model.Sm, batchSize int) error
	Save(values ...*model.Sm) error
	First() (*model.Sm, error)
	Take() (*model.Sm, error)
	Last() (*model.Sm, error)
	Find() ([]*model.Sm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sm, err error)
	FindInBatches(result *[]*model.Sm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmDo
	Assign(attrs ...field.AssignExpr) ISmDo
	Joins(fields ...field.RelationField) ISmDo
	Preload(fields ...field.RelationField) ISmDo
	FirstOrInit() (*model.Sm, error)
	FirstOrCreate() (*model.Sm, error)
	FindByPage(offset int, limit int) (result []*model.Sm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smDo) Debug() ISmDo {
	return s.withDO(s.DO.Debug())
}

func (s smDo) WithContext(ctx context.Context) ISmDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smDo) ReadDB() ISmDo {
	return s.Clauses(dbresolver.Read)
}

func (s smDo) WriteDB() ISmDo {
	return s.Clauses(dbresolver.Write)
}

func (s smDo) Session(config *gorm.Session) ISmDo {
	return s.withDO(s.DO.Session(config))
}

func (s smDo) Clauses(conds ...clause.Expression) ISmDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smDo) Returning(value interface{}, columns ...string) ISmDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smDo) Not(conds ...gen.Condition) ISmDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smDo) Or(conds ...gen.Condition) ISmDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smDo) Select(conds ...field.Expr) ISmDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smDo) Where(conds ...gen.Condition) ISmDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smDo) Order(conds ...field.Expr) ISmDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smDo) Distinct(cols ...field.Expr) ISmDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smDo) Omit(cols ...field.Expr) ISmDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smDo) Join(table schema.Tabler, on ...field.Expr) ISmDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smDo) Group(cols ...field.Expr) ISmDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smDo) Having(conds ...gen.Condition) ISmDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smDo) Limit(limit int) ISmDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smDo) Offset(offset int) ISmDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smDo) Unscoped() ISmDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smDo) Create(values ...*model.Sm) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smDo) CreateInBatches(values []*model.Sm, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smDo) Save(values ...*model.Sm) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smDo) First() (*model.Sm, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sm), nil
	}
}

func (s smDo) Take() (*model.Sm, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sm), nil
	}
}

func (s smDo) Last() (*model.Sm, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sm), nil
	}
}

func (s smDo) Find() ([]*model.Sm, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sm), err
}

func (s smDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sm, err error) {
	buf := make([]*model.Sm, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smDo) FindInBatches(result *[]*model.Sm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smDo) Attrs(attrs ...field.AssignExpr) ISmDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smDo) Assign(attrs ...field.AssignExpr) ISmDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smDo) Joins(fields ...field.RelationField) ISmDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smDo) Preload(fields ...field.RelationField) ISmDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smDo) FirstOrInit() (*model.Sm, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sm), nil
	}
}

func (s smDo) FirstOrCreate() (*model.Sm, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sm), nil
	}
}

func (s smDo) FindByPage(offset int, limit int) (result []*model.Sm, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smDo) Delete(models ...*model.Sm) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smDo) withDO(do gen.Dao) *smDo {
	s.DO = *do.(*gen.DO)
	return s
}
