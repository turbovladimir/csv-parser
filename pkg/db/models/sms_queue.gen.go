// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/turbovladimir/csv-parser/pkg/db/model"
)

func newSmsQueue(db *gorm.DB, opts ...gen.DOOption) smsQueue {
	_smsQueue := smsQueue{}

	_smsQueue.smsQueueDo.UseDB(db, opts...)
	_smsQueue.smsQueueDo.UseModel(&model.SmsQueue{})

	tableName := _smsQueue.smsQueueDo.TableName()
	_smsQueue.ALL = field.NewAsterisk(tableName)
	_smsQueue.ID = field.NewInt32(tableName, "id")
	_smsQueue.AddedAt = field.NewTime(tableName, "added_at")
	_smsQueue.Status = field.NewString(tableName, "status")
	_smsQueue.FilePath = field.NewString(tableName, "file_path")

	_smsQueue.fillFieldMap()

	return _smsQueue
}

type smsQueue struct {
	smsQueueDo

	ALL      field.Asterisk
	ID       field.Int32
	AddedAt  field.Time
	Status   field.String
	FilePath field.String

	fieldMap map[string]field.Expr
}

func (s smsQueue) Table(newTableName string) *smsQueue {
	s.smsQueueDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsQueue) As(alias string) *smsQueue {
	s.smsQueueDo.DO = *(s.smsQueueDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsQueue) updateTableName(table string) *smsQueue {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.AddedAt = field.NewTime(table, "added_at")
	s.Status = field.NewString(table, "status")
	s.FilePath = field.NewString(table, "file_path")

	s.fillFieldMap()

	return s
}

func (s *smsQueue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsQueue) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["added_at"] = s.AddedAt
	s.fieldMap["status"] = s.Status
	s.fieldMap["file_path"] = s.FilePath
}

func (s smsQueue) clone(db *gorm.DB) smsQueue {
	s.smsQueueDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsQueue) replaceDB(db *gorm.DB) smsQueue {
	s.smsQueueDo.ReplaceDB(db)
	return s
}

type smsQueueDo struct{ gen.DO }

type ISmsQueueDo interface {
	gen.SubQuery
	Debug() ISmsQueueDo
	WithContext(ctx context.Context) ISmsQueueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsQueueDo
	WriteDB() ISmsQueueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsQueueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsQueueDo
	Not(conds ...gen.Condition) ISmsQueueDo
	Or(conds ...gen.Condition) ISmsQueueDo
	Select(conds ...field.Expr) ISmsQueueDo
	Where(conds ...gen.Condition) ISmsQueueDo
	Order(conds ...field.Expr) ISmsQueueDo
	Distinct(cols ...field.Expr) ISmsQueueDo
	Omit(cols ...field.Expr) ISmsQueueDo
	Join(table schema.Tabler, on ...field.Expr) ISmsQueueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsQueueDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsQueueDo
	Group(cols ...field.Expr) ISmsQueueDo
	Having(conds ...gen.Condition) ISmsQueueDo
	Limit(limit int) ISmsQueueDo
	Offset(offset int) ISmsQueueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsQueueDo
	Unscoped() ISmsQueueDo
	Create(values ...*model.SmsQueue) error
	CreateInBatches(values []*model.SmsQueue, batchSize int) error
	Save(values ...*model.SmsQueue) error
	First() (*model.SmsQueue, error)
	Take() (*model.SmsQueue, error)
	Last() (*model.SmsQueue, error)
	Find() ([]*model.SmsQueue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsQueue, err error)
	FindInBatches(result *[]*model.SmsQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsQueue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsQueueDo
	Assign(attrs ...field.AssignExpr) ISmsQueueDo
	Joins(fields ...field.RelationField) ISmsQueueDo
	Preload(fields ...field.RelationField) ISmsQueueDo
	FirstOrInit() (*model.SmsQueue, error)
	FirstOrCreate() (*model.SmsQueue, error)
	FindByPage(offset int, limit int) (result []*model.SmsQueue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsQueueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsQueueDo) Debug() ISmsQueueDo {
	return s.withDO(s.DO.Debug())
}

func (s smsQueueDo) WithContext(ctx context.Context) ISmsQueueDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsQueueDo) ReadDB() ISmsQueueDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsQueueDo) WriteDB() ISmsQueueDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsQueueDo) Session(config *gorm.Session) ISmsQueueDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsQueueDo) Clauses(conds ...clause.Expression) ISmsQueueDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsQueueDo) Returning(value interface{}, columns ...string) ISmsQueueDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsQueueDo) Not(conds ...gen.Condition) ISmsQueueDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsQueueDo) Or(conds ...gen.Condition) ISmsQueueDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsQueueDo) Select(conds ...field.Expr) ISmsQueueDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsQueueDo) Where(conds ...gen.Condition) ISmsQueueDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsQueueDo) Order(conds ...field.Expr) ISmsQueueDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsQueueDo) Distinct(cols ...field.Expr) ISmsQueueDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsQueueDo) Omit(cols ...field.Expr) ISmsQueueDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsQueueDo) Join(table schema.Tabler, on ...field.Expr) ISmsQueueDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsQueueDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsQueueDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsQueueDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsQueueDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsQueueDo) Group(cols ...field.Expr) ISmsQueueDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsQueueDo) Having(conds ...gen.Condition) ISmsQueueDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsQueueDo) Limit(limit int) ISmsQueueDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsQueueDo) Offset(offset int) ISmsQueueDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsQueueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsQueueDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsQueueDo) Unscoped() ISmsQueueDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsQueueDo) Create(values ...*model.SmsQueue) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsQueueDo) CreateInBatches(values []*model.SmsQueue, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsQueueDo) Save(values ...*model.SmsQueue) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsQueueDo) First() (*model.SmsQueue, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsQueue), nil
	}
}

func (s smsQueueDo) Take() (*model.SmsQueue, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsQueue), nil
	}
}

func (s smsQueueDo) Last() (*model.SmsQueue, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsQueue), nil
	}
}

func (s smsQueueDo) Find() ([]*model.SmsQueue, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsQueue), err
}

func (s smsQueueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsQueue, err error) {
	buf := make([]*model.SmsQueue, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsQueueDo) FindInBatches(result *[]*model.SmsQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsQueueDo) Attrs(attrs ...field.AssignExpr) ISmsQueueDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsQueueDo) Assign(attrs ...field.AssignExpr) ISmsQueueDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsQueueDo) Joins(fields ...field.RelationField) ISmsQueueDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsQueueDo) Preload(fields ...field.RelationField) ISmsQueueDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsQueueDo) FirstOrInit() (*model.SmsQueue, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsQueue), nil
	}
}

func (s smsQueueDo) FirstOrCreate() (*model.SmsQueue, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsQueue), nil
	}
}

func (s smsQueueDo) FindByPage(offset int, limit int) (result []*model.SmsQueue, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsQueueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsQueueDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsQueueDo) Delete(models ...*model.SmsQueue) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsQueueDo) withDO(do gen.Dao) *smsQueueDo {
	s.DO = *do.(*gen.DO)
	return s
}
